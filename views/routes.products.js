const express = require('express');
const router = express.Router();
const fs = require('fs');
const path = require('path');
const ejs = require('ejs');

// Configurar el motor de plantillas EJS
router.set('view engine', 'ejs');
router.set('views', path.join(__dirname, 'views'));

// Function to save products to file
function saveProducts(products) {
  fs.writeFileSync('./data/productos.json', JSON.stringify(products));
}

// Function to load products from file
function loadProducts() {
  try {
    const data = fs.readFileSync('./data/productos.json', 'utf8');
    return JSON.parse(data);
  } catch (err) {
    console.error(err);
    return [];
  }
}

// List all products
router.get('/', (req, res) => {
  const products = loadProducts();
  res.render('products', { products: products }); // Renderizar la plantilla "products.ejs" y pasar los datos de los productos
});

// Get product by id
router.get('/:pid', (req, res) => {
  const products = loadProducts();
  const product = products.find(p => p.id === parseInt(req.params.pid));
  if (!product) {
    res.status(404).send('Product not found');
  } else {
    res.json(product);
  }
});

// Add new product
router.post('/', (req, res) => {
  const products = loadProducts();
  const newProduct = {
    id: products.length + 1, // Autogenerated id
    title: req.body.title,
    description: req.body.description,
    code: req.body.code,
    price: req.body.price,
    status: req.body.status,
    stock: req.body.stock,
    category: req.body.category,
    thumbnails: req.body.thumbnails
  };
  products.push(newProduct);
  saveProducts(products); // Save updated products to file
  res.json(newProduct);
});

// Update product by id
router.put('/:pid', (req, res) => {
  const products = loadProducts();
  const productIndex = products.findIndex(p => p.id === parseInt(req.params.pid));
  if (productIndex === -1) {
    res.status(404).send('Product not found');
  } else {
    const updatedProduct = {
      ...products[productIndex],
      ...req.body,
      id: products[productIndex].id // Do not update id
    };
    products[productIndex] = updatedProduct;
    saveProducts(products); // Save updated products to file
    res.json(updatedProduct);
  }
});

// Delete product by id
router.delete('/:pid', (req, res) => {
  const products = loadProducts();
  const productIndex = products.findIndex(p => p.id === parseInt(req**carpeta routes/auth.js**
```javascript
const express = require('express');
const router = express.Router();
const passport = require('passport');
const bcrypt = require('bcrypt');
const User = require('../dao/models/user');

// Ruta para mostrar el formulario de registro
router.get('/register', (req, res) => {
  res.render('register');
});

// Ruta para manejar el registro de un nuevo usuario
router.post('/register', async (req, res) => {
  const { username, password } = req.body;
  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ username, password: hashedPassword });
    await user.save();
    res.redirect('/login');
  } catch (error) {
    res.status(500).send('Error al registrar el usuario');
  }
});

// Ruta para mostrar el formulario de inicio de sesión
router.get('/login', (req, res) => {
  res.render('login');
});

// Ruta para manejar el inicio de sesión de un usuario
router.post('/login', passport.authenticate('local', { failureRedirect: '/login', failureFlash: true }), (req, res) => {
  res.redirect('/');
});

// Ruta para cerrar sesión
router.get('/logout', (req, res) => {
  req.logout();
  res.redirect('/login');
});

module.exports = router;```
